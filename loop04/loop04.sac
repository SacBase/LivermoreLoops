/*******************************************************************************
 *
 * Livermore Loop no 4
 *
 * banded linear equations
 *
 *******************************************************************************/

use StdIO: all;
use Array: all;
use RTimer: all;
use CommandLine: all;
use String: {sscanf};


#ifndef VARIANT
#define VARIANT NAIVE
#endif

#define APPEND(v) Loop4_ ## v
#define FULL(v) APPEND(v)
#define LOOP FULL( VARIANT)

#define STR(s) #s
#define STRING(s) STR(s)


#ifndef SIZE
#define SIZE 1001
#endif

inline
double[.] Loop4_C( int m, int n, double[SIZE] x, double[SIZE] y)
{
  for( k=6; k<SIZE; k+=m) {
    lw = k-6;
    temp = x[k-1];
    for( j=4; j<n; j+=5) {
      temp -= x[lw] * y[j];
      lw++;
    }
    x[k-1] = y[4] * temp;
  }
  return x;
}

inline
double[.] Loop4_NAIVE( int m, int n, double[SIZE] x, double[SIZE] y)
{
  for( k=6; k<SIZE; k+=m) {
    tmp = x[k-1];
    tmp -= with {
             ( [0] <= [j] < [n/5]) : x[j+k-6] * y[4+5*j];
           } : fold( +, 0d);
    x[k-1] = y[4] * tmp;
  }
  return x;
}

inline
double[*] condense( int[.] factors, double[*] a)
{
  res = with {
          ( . <= iv < shape(a)/factors) : a[factors*iv];
        } : genarray( shape(a), 0d);
  return res;
}


inline
double[.] Loop4_APL(int m, int n, double[SIZE] x, double[SIZE] y)
{
  chunk = n/5;
  for( k=6; k<SIZE; k+=m) {
    tmp = x[k-1];
    tmp -= sum( take( [chunk], drop([k-6], x)) *
                      take( [chunk], condense( [5], drop( [4], y))));
    x[k-1] = y[4] * tmp;
  }
  return(x);
}

inline
double[.] Loop4_APL2(int m, int n, double[SIZE] x, double[SIZE] y)
{
  chunk = n/5;
  for( k=6; k<SIZE; k+=m) {
    tmp = x[k-1];
    tmp -= sum( take( [chunk], shift([6-k], x) *
                               condense( [5], shift( [-4], y))));
    x[k-1] = y[4] * tmp;
  }
  return(x);
}

inline double BandedIp( int[+] offset, int from, int to, double[+] x, double[+] y)
{
  band_mult = with {
                ( [from] <= [j] <= [to] ) : ( x[ (offset-6) + j ] * y[5*j - 1] );
              } : fold( +, 0d );

  return( band_mult);
}

inline
double[.] Loop4_GENERIC( int m, int n, double[SIZE] x, double[SIZE] y)
{
  chunk = n / 5;
  for( k=6; k<SIZE; k+=m) {
    x[[k-1]] = y[[4]] * (x[[k-1]]   - BandedIp( [k-1], 1, chunk, x, y));
  }

  return(x);
}



inline double[.] genArray(int size)
{
  A = 1d / tod( 1 + iota(size));
  return(A);
}


int main ()
{
  int zig; // Crude zero-if-good result
  double[ SIZE] x;
double WANT;
  timer = createRTimer();

  rep = getArg(3);  //         loop04 -mt 4 20000000 35
                  //parameter #0      1   2 3       4
  n   = getArg(4);  //         loop04 -mt 4 20000000 35 

  m = (SIZE-7)/2;
  x = genArray( SIZE);
  y = x;

  printf( "Running " STRING( LOOP) "\n");
  printf( "Number of repetitions: %d\n", rep);
  printf( "Vector length        : %d\n", SIZE);
  printf( "Upper limit (n)      : %d\n", n);

  startRTimer( timer);
  noLir = 0.0;
  for (i=0; i<rep; i++){
    x = LOOP( m, n, x, y);
  }
  stopRTimer( timer);

  WANT = -0.0735877326137d;
  printf( "Element [5] of the result is: %.18g, WANT is: %.18g\n", x[5], WANT);
  printf("x[5] - WANT is %.18g\n", x[5] - WANT);
  printf("WANT - x[5] is %.18g\n", WANT - x[5]);
  zig = toi( !APEXFUZZEQ( WANT, x[5], 1e-10));

  numFlops = tod(rep)*tod((SIZE-6)/m)*tod((n-4)/5)*2.0;

  printf( "Wall Clock Time spent           : %7.3f secs\n", getRTimerDbl( timer));
  printf( "Computer Performance achieved   : %7.3f GFlops/s\n", (tod(numFlops)/1000000000.0) / getRTimerDbl( timer));
  
  return( zig);
}

inline bool APEXFUZZEQ( double x, double y, double CT)
{ // ISO APL Tolerant equality predicate
 absx = abs(x);
 absy = abs(y);
 tolerance = CT * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int getArg(int y)
{ // Get Command-line argument element y as integer scalar
  int z;
  junk, z = sscanf(argv(toi(y)), "%d");
  return( z);
}

